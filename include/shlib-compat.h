/* Macros for managing ABI-compatibility definitions using ELF symbol versions.
   Copyright (C) 2000 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#ifndef _SHLIB_COMPAT_H
#define _SHLIB_COMPAT_H	1

#if defined HAVE_ELF && defined PIC && defined DO_VERSIONING

#include <abi-versions.h>	/* header generated by abi-versions.awk */

/* The file abi-versions.h (generated by scripts/abi-versions.awk) defines
   symbols like `ABI_libm_GLIBC_2_0' to either 1 or 0 indicating whether or
   not we want to build binary compatibility for e.g. the GLIBC_2.0 version
   set into the libm shared object.  If this evaluates to zero, then there
   is no need to compile in extra code to support this version set where it
   has been superseded by a newer version.  The compatibility code should
   be conditionalized with `#if SHLIB_COMPAT (libm, GLIBC_2_0)'.  */

#define SHLIB_COMPAT(lib, version)	ABI_##lib##_##version

/* That header also defines symbols like `VERSION_libm_GLIBC_2_1' to
   the version set name to use for e.g. symbols first introduced into
   libm in the GLIBC_2.1 version.  Definitions of symbols with explicit
   versions should look like:
   	versioned_symbol (libm, new_foo, foo, GLIBC_2_1);
   This will define the symbol `foo' with the appropriate default version,
   i.e. either GLIBC_2.1 or the "earliest version" specified in
   shlib-versions if that is newer.  */

#define versioned_symbol(lib, local, symbol, version) \
  default_symbol_version (local, symbol, VERSION_##lib##_##version)

#else

/* Not compiling ELF shared libraries at all, so never any old versions.  */
#define SHLIB_COMPAT(lib, version)	0

/* No versions to worry about, just make this the global definition.  */
#define versioned_symbol(lib, local, symbol, version) \
  weak_alias (local, symbol)

#endif


#endif	/* shlib-compat.h */
