libc {
  GLIBC_2.0 {
    # Hurd-specific variables
    __hurd_sigthread_stack_base; __hurd_sigthread_stack_end;
    __hurd_sigthread_variables; __hurd_threadvar_max;
    __hurd_threadvar_stack_mask; __hurd_threadvar_stack_offset;
    _hurd_device_master; _hurd_host_priv;

    # Hurd-specific exported functions from <hurd.h>
    _hurd_ports; _hurd_ports_use;
    getcrdir; getcwdir; getauth; getproc; getcttyid;
    setcrdir; setcwdir; setauth; setproc; setcttyid;
    file_name_split; file_name_lookup; file_name_lookup_under;
    file_name_path_lookup;
    openport; fopenport; task2pid; pid2task; getdport; vpprintf;
    hurd_thread_self; hurd_thread_cancel; hurd_check_cancel;
    hurd_safe_memset;
    _hurd_init; _hurd_proc_init;
    _hurd_exec;
    _hurd_canonicalize_directory_name_internal;
    getuids; __getuids;

    # XXX ought to exist on all platforms
    getumask;

    # <hurd/lookup.h>
    hurd_file_name_lookup; __hurd_file_name_lookup;
    hurd_file_name_lookup_retry; __hurd_file_name_lookup_retry;
    hurd_file_name_split; __hurd_file_name_split;
    hurd_file_name_path_lookup; __hurd_file_name_path_lookup;

    # <hurd/signal.h>
    _hurd_thread_sigstate; _hurd_msgport;
    _hurd_exception2signal;
    hurd_sig_post;

    # <hurd/sigpreempt.h>
    hurd_catch_signal;
    hurd_preempt_signals;

    # <hurd/port.h>
    _hurd_port_cleanup;

    # Internal functions referenced by libmachuser and libhurduser.
    _S_catch_exception_raise;
    _S_msg_add_auth; _S_msg_del_auth;
    _S_msg_describe_ports;
    _S_msg_get_dtable; _S_msg_set_dtable;
    _S_msg_get_env_variable; _S_msg_set_env_variable;
    _S_msg_get_environment; _S_msg_set_environment;
    _S_msg_get_fd; _S_msg_set_fd;
    _S_msg_get_init_int; _S_msg_set_init_int;
    _S_msg_get_init_ints; _S_msg_set_init_ints;
    _S_msg_get_init_port; _S_msg_set_init_port;
    _S_msg_get_init_ports; _S_msg_set_init_ports;
    _S_msg_proc_newids; _S_msg_report_wait;
    _S_msg_sig_post; _S_msg_sig_post_untraced;
    _hurd_intr_rpc_mach_msg; _hurdsig_fault_catch_exception_raise;
  }
}
