Installing the GNU C Library
****************************

   Before you do anything else, you should read the file `FAQ' found at
the top level of the source tree.  This file answers common questions
and describes problems you may experience with compilation and
installation.  It is updated more frequently than this manual.

   Two components of GNU Libc are distributed as "add-on" bundles
separate from the main distribution.  Unless you are doing an unusual
installation, you should get them both.  Support for the `crypt'
function is distributed separately because of US export restrictions.
If you are outside the US or Canada, you must get `crypt' support from
a site outside the US, such as `ftp.ifi.uio.no'.  (Most non-US mirrors
of `ftp.gnu.org' will have it too.)  The file you need is
`glibc-crypt-VERSION.tar.gz'.  Support for POSIX threads is maintained
by someone else, so it's in a separate package.  At the moment it is
only available for Linux systems; this will change in the future.  Get
it from the same place you got the main bundle; the file is
`glibc-linuxthreads-VERSION.tar.gz'.  Both add-on bundles should be
unpacked into the top level of the libc source tree.

   You will need recent versions of several GNU tools: definitely GCC
and GNU Make, and possibly others.  *Note Tools for Installation::,
below.

Configuring and compiling GNU Libc
==================================

   GNU Libc cannot be compiled in the source directory.  You must
create a separate directory for the object files.  This directory
should be outside the source tree.  For example, if you have unpacked
the glibc sources in `/src/gnu/glibc-2.1.0', create a directory
`/src/gnu/glibc-build' to put the object files in.

   From your object directory, run the shell script `configure' found
at the top level of the source tree.  In the scenario above, you'd type

     $ ../glibc-2.1.0/configure ARGS...

`configure' takes many options, but you can get away with knowing only
two: `--enable-add-ons' and `--prefix'.  The `--enable-add-ons' option
tells configure to use all the add-on bundles it finds in the source
directory.  Since important functionality is provided in add-ons, you
should always give this option.  The `--prefix' option tells configure
where you want glibc installed.  This defaults to `/usr/local'.  If you
are installing glibc as your primary C library, give the option
`--prefix=/usr', which will put components in `/usr' or `/' as
appropriate.

   It may also be useful to set the CC and CFLAGS variables in the
environment when running `configure'.  CC selects the C compiler that
will be used, and CFLAGS sets optimization options for the compiler.

   Here are all the useful options known by `configure':

`--prefix=DIRECTORY'
     Install machine-independent data files in subdirectories of
     `DIRECTORY'.  The default is to install in `/usr/local'.

`--exec-prefix=DIRECTORY'
     Install the library and other machine-dependent files in
     subdirectories of `DIRECTORY'.  The default is to the `--prefix'
     directory if that option is given, or `/usr/local' otherwise.

`--with-headers=DIRECTORY'
     Look for kernel header files in DIRECTORY, not `/usr/include'.
     Glibc needs information from the kernel's private header files.
     It will normally look in `/usr/include' for them, but if you give
     this option, it will look in DIRECTORY instead.

     This option is primarily of use on a system where the headers in
     `/usr/include' come from an older version of glibc.  Conflicts can
     occasionally happen in this case.  Note that Linux libc5 qualifies
     as an older version of glibc.  You can also use this option if you
     want to compile glibc with a newer set of kernel headers than the
     ones found in `/usr/include'.

`--enable-add-ons[=LIST]'
     Enable add-on packages in your source tree.  If this option is
     given with no list, it enables all the add-on packages it finds.
     If you do not wish to use some add-on package that you have
     present in your source tree, give this option a list of the
     add-ons that you *do* want used, like this:
     `--enable-add-ons=crypt,linuxthreads'

`--with-binutils=DIRECTORY'
     Use the binutils (assembler and linker) in `DIRECTORY', not the
     ones the C compiler would default to.  You could use this option if
     the default binutils on your system cannot deal with all the
     constructs in the GNU C library.  (`configure' will detect the
     problem and suppress these constructs, so the library will still
     be usable, but functionality may be lost--for example, you can not
     build a shared libc with old binutils.)

`--without-fp'
     Use this option if your computer lacks hardware floating-point
     support and your operating system does not emulate an FPU.

`--disable-static'
     Don't build static libraries.  Static libraries aren't that useful
     these days, but we recommend you build them in case you need them.

`--disable-shared'
     Don't build shared libraries even if we could.  Not all systems
     support shared libraries; you need ELF support and (currently) the
     GNU linker.

`--disable-profile'
     Don't build libraries with profiling information.  You may want to
     use this option if you don't plan to do profiling.

`--enable-omitfp'
     Use maximum optimization for the normal (static and shared)
     libraries, and compile separate static libraries with debugging
     information and no optimisation.  We recommend against this.  The
     extra optimization doesn't gain you much, it may provoke compiler
     bugs, and you won't be able to trace bugs through the C library.

`--disable-versioning'
     Don't compile the shared libraries with symbol version information.
     Doing this will make the library that's built incompatible with old
     binaries, so it's not recommended.

`--enable-static-nss'
     Compile static versions of the NSS (Name Service Switch) libraries.
     This is not recommended because it defeats the purpose of NSS; a
     program linked statically with the NSS libraries cannot be
     dynamically reconfigured to use a different name database.

`--build=BUILD-SYSTEM'
`--host=HOST-SYSTEM'
     These options are for cross-compiling.  If you give them both and
     BUILD-SYSTEM is different from HOST-SYSTEM, `configure' will
     prepare to cross-compile glibc from BUILD-SYSTEM to be used on
     HOST-SYSTEM.  You'll probably need the `--with-headers' option
     too, and you may have to override CONFIGURE's selection of the
     compiler and/or binutils.

     If you give just one of these, `configure' will get confused.  If
     `configure' doesn't correctly guess your system type for a native
     build, report that as a bug.

   To build the library and related programs, type `make'.  This will
produce a lot of output, some of which may look like errors from `make'
but isn't.  Look for error messages from `make' containing `***'.
Those indicate that something is really wrong.

   The compilation process takes several hours even on fast hardware.
Expect at least two hours for the default configuration on i586 for
Linux.  For Hurd times are much longer.  Except for EGCS 1.1 (and later
versions of EGCS), all supported versions of GCC have a problem which
causes them to take several minutes to compile certain files in the
iconvdata directory.  Do not panic if the compiler appears to hang.

   If you want to run a parallel make, you can't just give `make' the
`-j' option, because it won't be passed down to the sub-makes.
Instead, edit the generated `Makefile' and uncomment the line

     # PARALLELMFLAGS = -j 4

You can change the `4' to some other number as appropriate for your
system.

   To build and run some test programs which exercise some of the
library facilities, type `make check'.  This should complete
successfully; if it doesn't, do not use the built library, and report a
bug.  *Note Reporting Bugs::, for how to do that.  Note that some of
the tests assume they are not being run by `root'.  We recommend you
compile and test glibc as an unprivileged user.

   To format the `GNU C Library Reference Manual' for printing, type
`make dvi'.  You need a working TeX installation to do this.

   To install the library and its header files, and the Info files of
the manual, type `make install'.  This will build things if necessary,
before installing them.  If you want to install the files in a different
place than the one specified at configuration time you can specify a
value for the Makefile variable `install_root' on the command line.
This is useful to create chroot'ed environment or to prepare binary
releases.

Recommended Tools for Compilation
=================================

   We recommend installing the following GNU tools before attempting to
build the GNU C library:

   * GNU `make' 3.75

     You need the latest version of GNU `make'.  Modifying the GNU C
     Library to work with other `make' programs would be so hard that we
     recommend you port GNU `make' instead.  *Really.*  We recommend
     version GNU `make' version 3.75 or 3.77.  All earlier versions
     have severe bugs or lack features. Version 3.76 is known to have
     bugs which only show up in big projects like GNU `libc'.  Version
     3.76.1 seems OK but some people have reported problems.

   * EGCS 1.1 or 1.0.3

     The GNU C library can only be compiled with the GNU C compiler
     family.  We recommend EGCS 1.0.3 or higher.  GCC 2.8.1 and older
     versions of EGCS may have problems, particularly on non-Intel
     architectures.  GCC 2.7.x has catastrophic bugs and cannot be used
     at all.

   * GNU `binutils' 2.8.1.0.23, 2.9.1, or 2.9.0.15

     You must use GNU binutils (as and ld) if you want to build a shared
     library.  Even if you don't, we recommend you use them anyway.  No
     one has tested compilation with non-GNU binutils in a long time.

     The quality of binutils releases has varied a bit recently.  The
     bugs are in obscure features, but glibc uses quite a few of those.
     2.8.1.0.23, 2.9.1, and 2.9.0.15 are known to work.  Versions after
     2.8.1.0.23 may or may not work.  Older versions definitely don't.

   * GNU `texinfo' 3.11

     To correctly translate and install the Texinfo documentation you
     need this version of the `texinfo' package.  Earlier versions do
     not understand all the tags used in the document, and the
     installation mechanisms for the info files is not present or works
     differently.

     On some Debian Linux based systems the `install-info' program
     supplied with the system works differently from the one we expect.
     You must therefore run `make install' like this:

          make INSTALL_INFO=/path/to/GNU/install-info install

   * GNU `awk' 3.0, or some other POSIX awk

     Awk is used in several places to generate files.  The scripts
     should work with any POSIX-compliant awk implementation; GNU awk
     3.0 and `mawk' 1.3 are known to work.

   * Perl 5

     Perl is not required, but it is used if present to test the
     installation.  We may decide to use it elsewhere in the future.

If you change any of the `configure.in' files you will also need

   * GNU `autoconf' 2.12

and if you change any of the message translation files you will need

   * GNU `gettext' 0.10.35 or later

You may also need these packages if you upgrade your source tree using
patches, although we try to avoid this.

Supported Configurations
========================

   The GNU C Library currently supports configurations that match the
following patterns:

     alpha-*-linux
     arm-*-linuxaout
     arm-*-none
     iX86-*-gnu
     iX86-*-linux
     m68k-*-linux
     powerpc-*-linux
     sparc-*-linux
     sparc64-*-linux

   Former releases of this library (version 1.09.1 and perhaps earlier
versions) used to run on the following configurations:

     alpha-dec-osf1
     alpha-*-linuxecoff
     iX86-*-bsd4.3
     iX86-*-isc2.2
     iX86-*-isc3.N
     iX86-*-sco3.2
     iX86-*-sco3.2v4
     iX86-*-sysv
     iX86-*-sysv4
     iX86-force_cpu386-none
     iX86-sequent-bsd
     i960-nindy960-none
     m68k-hp-bsd4.3
     m68k-mvme135-none
     m68k-mvme136-none
     m68k-sony-newsos3
     m68k-sony-newsos4
     m68k-sun-sunos4.N
     mips-dec-ultrix4.N
     mips-sgi-irix4.N
     sparc-sun-solaris2.N
     sparc-sun-sunos4.N

   Since no one has volunteered to test and fix these configurations,
they are not supported at the moment.  They probably don't compile;
they definitely don't work anymore.  Porting the library is not hard.
If you are interested in doing a port, please contact the glibc
maintainers by sending electronic mail to <bug-glibc@gnu.org>.

   Each case of `iX86' can be `i386', `i486', `i586', or `i686'.  All
of those configurations produce a library that can run on any of these
processors.  The library will be optimized for the specified processor,
but will not use instructions not available on all of them.

   While no other configurations are supported, there are handy aliases
for these few.  (These aliases work in other GNU software as well.)

     decstation
     hp320-bsd4.3 hp300bsd
     i486-gnu
     i586-linux
     i386-sco
     i386-sco3.2v4
     i386-sequent-dynix
     i386-svr4
     news
     sun3-sunos4.N sun3
     sun4-solaris2.N sun4-sunos5.N
     sun4-sunos4.N sun4

Reporting Bugs
==============

   There are probably bugs in the GNU C library.  There are certainly
errors and omissions in this manual.  If you report them, they will get
fixed.  If you don't, no one will ever know about them and they will
remain unfixed for all eternity, if not longer.

   To report a bug, first you must find it.  Hopefully, this will be the
hard part.  Once you've found a bug, make sure it's really a bug.  A
good way to do this is to see if the GNU C library behaves the same way
some other C library does.  If so, probably you are wrong and the
libraries are right (but not necessarily).  If not, one of the libraries
is probably wrong.

   Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library function
call, if possible.  This should not be too difficult.

   The final step when you have a simple test case is to report the bug.
When reporting a bug, send your test case, the results you got, the
results you expected, what you think the problem might be (if you've
thought of anything), your system type, and the version of the GNU C
library which you are using.  Also include the files `config.status'
and `config.make' which are created by running `configure'; they will
be in whatever directory was current when you ran `configure'.

   If you think you have found some way in which the GNU C library does
not conform to the ISO and POSIX standards (*note Standards and
Portability::.), that is definitely a bug.  Report it!

   Send bug reports to the Internet address <bug-glibc@gnu.org> using
the `glibcbug' script which is installed by the GNU C library.  If you
have other problems with installation or use, please report those as
well.

   If you are not sure how a function should behave, and this manual
doesn't tell you, that's a bug in the manual.  Report that too!  If the
function's behavior disagrees with the manual, then either the library
or the manual has a bug, so report the disagreement.  If you find any
errors or omissions in this manual, please report them to the Internet
address <bug-glibc-manual@gnu.org>.  If you refer to specific sections
when reporting on the manual, please include the section names for
easier identification.

