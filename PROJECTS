Open jobs for finishing GNU libc:
---------------------------------
Status: October 1996

If you have time and talent to take over any of the jobs below please
contact <bug-glibc@prep.ai.mit.edu>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[ 1] Port to new platforms or test current version on formerly supported
     platforms.


[ 2] Test compliance with standards.  If you have access to recent
     standards (IEEE, ISO, ANSI, X/Open, ...) and/or test suites you
     could do some checks as the goal is to be compliant with all
     standards if they do not contradict each other.


[ 3] Write translations for the GNU libc message for the so far
     unsupported languages.  GNU libc is fully internationalized and
     users can immediately benefit from this.

     Take a look at the matrix in
	ftp://prep.ai.mit.edu/pub/gnu/ABOUT-NLS
     for the current status (of course better use a mirror of prep).


[ 4] Write wordexp() function; this is described in POSIX.2, the
     header <wordexp.h> already exists.

     Implementation idea: use some functions from bash.


[ 5] Write `long double' versions of the math functions.  This should be
     done in collaboration with the NetBSD and FreeBSD people.

     The libm is in fact fdlibm (not the same as in Linux libc).

**** Partly done.  But we need someone with numerical experiences for
     the rest.


[ 6] If you enjoy assembler programming (as I do --drepper :-) you might
     be interested in writing optimized versions for some functions.
     Especially the string handling functions can be optimized a lot.

     Take a look at

	Faster String Functions
	Henry Spencer, University of Toronto
	Usenix Winter '92, pp. 419--428

     or just ask.  Currently mostly i?86 and Alpha optimized versions
     exist.  Please ask before working on this to avoid duplicate
     work.


[ 7] Write nftw() function.  Perhaps it might be good to reimplement the
     ftw() function as well to share most of the code.

**** Almost done!


[ 8] Write AVL-tree based tsearch() et.al. functions.  Currently only
     a very simple algorithm is used.
     There is a public domain version but using this would cause problems
     with the assignment.


[ 9] Extend regex and/or rx to work with wide characters and complete
     implementation of character class and collation class handling.

     It is planed to do a complete rewrite.


[10] Write access function for netmasks, bootparams, and automount
     databases for nss_files and nss_db module.
     The functions should be embedded in the nss scheme.  This is not
     hard and not all services must be supported at once.


[11] Rewrite utmp/wtmp functions to use database functions.  This is much
     better than the normal flat file format.

     Please contact bug-glibc@prep.ai.mit.edu before starting to avoid
     duplicated work.
