sinclude(./aclocal.m4)dnl Autoconf lossage
GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
# Local configure fragment for sysdeps/unix/sysv/linux.

# On Linux, the default is to use libio instead of stdio.
test $stdio = default && stdio=libio

# Don't bother trying to generate any glue code to be compatible with the
# existing system library, because we are the only system library.
inhibit_glue=yes

define([LIBC_LINUX_VERSION],[2.0.10])dnl
if test -n "$sysheaders"; then
  OLD_CFLAGS=$CFLAGS
  CFLAGS="$CFLAGS $SYSINCLUDES"
fi
define([libc_cv_linuxVER], [libc_cv_linux]patsubst(LIBC_LINUX_VERSION,[\.]))dnl
AC_CACHE_CHECK(installed Linux kernel header files, libc_cv_linuxVER, [dnl
AC_EGREP_CPP([eat flaming death], [#include <linux/version.h>
#if !defined LINUX_VERSION_CODE || LINUX_VERSION_CODE < ]dnl
patsubst(LIBC_LINUX_VERSION,[^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$],dnl
[ (\1 *65536+ \2 *256+ \3) /* \1.\2.\3 */])[
eat flaming death
#endif],
	     libc_cv_linuxVER='TOO OLD!',
	     libc_cv_linuxVER='LIBC_LINUX_VERSION or later')])
if test "$libc_cv_linuxVER" != 'LIBC_LINUX_VERSION or later'; then
  AC_MSG_ERROR([GNU libc requires kernel header files from
Linux LIBC_LINUX_VERSION or later to be installed before configuring.
The kernel header files are found usually in /usr/include/asm and
/usr/include/linux; make sure these directories use files from
Linux LIBC_LINUX_VERSION or later.  This check uses <linux/version.h>, so
make sure that file was built correctly when installing the kernel header
files.  To use kernel headers not from /usr/include/linux, use the
configure option --with-headers.])
fi

# If the user gave a minimal version number test whether the available
# kernel headers are young enough.
if test -n "$minimum_kernel"; then
  AC_MSG_CHECKING(for kernel header at least $minimum_kernel)
changequote(,)dnl
  decnum=`echo "$minimum_kernel.0.0.0" | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/(\1 * 65536 + \2 * 256 + \3)/'`;
changequote([,])dnl
  AC_EGREP_CPP([eat flaming death], [#include <linux/version.h>
#if LINUX_VERSION_CODE < $decnum
eat flaming death
#endif], libc_minimum_kernel='too old!', libc_minimum_kernel=ok)
  AC_MSG_RESULT($libc_minimum_kernel)
  if test "$libc_minimum_kernel" = ok; then
    AC_DEFINE_UNQUOTED(__LINUX_KERNEL_VERSION, $decnum)
  else
    AC_MSG_ERROR([*** The available kernel headers are older than the requested
*** compatible kernel version])
  fi
fi

if test -n "$sysheaders"; then
  CFLAGS=$OLD_CFLAGS
fi
# The Linux filesystem standard prescribes where to place "essential"
# files.  I.e., when the installation prefix is "/usr" we have to place
# shared library objects and the configuration files on the root partition
# in /lib and /etc.
if test "$prefix" = "/usr"; then
  # 64bit libraries on sparc go to /lib64 and not /lib
  if test "$machine" = "sparc/sparc64"; then
    libc_cv_slibdir="/lib64"
    if test "$libdir" = '${exec_prefix}/lib'; then
      libdir='${exec_prefix}/lib64';
    fi
  else
    libc_cv_slibdir="/lib"
  fi
  libc_cv_sysconfdir="/etc"
  libc_cv_rootsbindir="/sbin"
fi

# Under Linux the LinuxThreads and crypt add-on should be available.
case $add_ons in
  # Both are available.  Good.
  *linuxthreads*crypt* | *crypt*linuxthreads*)
    message=
    ;;
  *linuxthreads*)
    message="\
*** WARNING:
*** Are you sure you do not want to use the \`crypt' add-on?"
    ;;
  *crypt*)
    message="\
*** WARNING:
*** Are you sure you do not want to use the \`linuxthread' add-on?"
    ;;
  *)
    message="\
*** WARNING: Are you sure you do not want to use the \`linuxthreads'
*** and \`crypt' add-ons?"
    ;;
esac

if test "$message"; then
  if test $enable_sanity = yes; then
    echo "\
*** You should not compile the GNU libc without the \`linuxthreads' and
*** \`crypt' add-on.  Not using them risks to be incompatible with the
*** libraries of other systems.  Consider getting the add-ons and restart
*** the configuration.
*** If you really mean to avoid those add-ons run configure again, now
*** using the extra parameter \`--disable-sanity-checks'."
    exit 1
  else
    echo "$message"
  fi
fi

# Check whether `ldconfig' sources are available.  This will go away as soon
# as ldconfig is available in GNU libc.
if test -f $srcdir/elf/ldconfig.c; then
  has_ldconfig=yes
fi

# We need some extensions to the `ldd' script.
changequote(,)
case "$machine" in
  i[3456]86* | m68* | sparc/sparc32)
    ldd_rewrite_script=../sysdeps/unix/sysv/linux/ldd-rewrite.sed
    ;;
  *)
    ;;
esac
changequote([,])

if test $host = $build; then
  # If $prefix/include/{net,scsi} are symlinks, make install will
  # clobber what they're linked to (probably a kernel tree).
  # test -L ought to work on all Linux boxes.
  if test "x$prefix" != xNONE; then
    ac_prefix=$prefix
  else
    ac_prefix=$ac_default_prefix
  fi
  AC_MSG_CHECKING([for symlinks in ${ac_prefix}/include])
  ac_message=
  if test -L ${ac_prefix}/include/net; then
    ac_message="$ac_message
   ${ac_prefix}/include/net is a symlink"
  fi
  if test -L ${ac_prefix}/include/scsi; then
    ac_message="$ac_message
   ${ac_prefix}/include/scsi is a symlink"
  fi
  if test -n "$ac_message"; then
    AC_MSG_ERROR([$ac_message
\`make install' will destroy the target of the link(s).
Delete the links and re-run configure, or better still, move the entire
${ac_prefix}/include directory out of the way.])
  else
    AC_MSG_RESULT(ok)
  fi
fi
